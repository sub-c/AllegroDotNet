using System;
using System.Runtime.InteropServices;
using SubC.AllegroDotNet.Enums;
using SubC.AllegroDotNet.Models;
using SubC.AllegroDotNet.Native.Libraries;

namespace SubC.AllegroDotNet
{
    /// <summary>
    /// Allegro game library methods.
    /// </summary>
    public static partial class Al
    {
        /// <summary>
        /// Install a keyboard driver. Returns true if successful. If a driver was already installed, nothing happens
        /// and true is returned.
        /// </summary>
        /// <returns>True if successful, otherwise false.</returns>
        public static bool InstallKeyboard() =>
            AllegroLibrary.AlInstallKeyboard();

        /// <summary>
        /// Returns true if al_install_keyboard was called successfully.
        /// </summary>
        /// <returns>True if keyboard is installed, otherwise false.</returns>
        public static bool IsKeyboardInstalled() =>
            AllegroLibrary.AlIsKeyboardInstalled();

        /// <summary>
        /// Uninstalls the active keyboard driver, if any. This will automatically unregister the keyboard event
        /// source with any event queues. This function is automatically called when Allegro is shut down.
        /// </summary>
        public static void UninstallKeyboard() =>
            AllegroLibrary.AlUninstallKeyboard();

        /// <summary>
        /// Save the state of the keyboard specified at the time the function is called into the structure
        /// pointed to by refState.
        /// </summary>
        /// <param name="retState">The keyboard state to be updated with the current state.</param>
        public static void GetKeyboardState(AllegroKeyboardState retState) =>
            AllegroLibrary.AlGetKeyboardState(ref retState.Native);

        /// <summary>
        /// Return true if the key specified was held down in the state specified.
        /// </summary>
        /// <param name="state">The current keyboard state.</param>
        /// <param name="keyCode">The key's code to check if it is down.</param>
        /// <returns>True if the key specified was held down in the state specified.</returns>
        public static bool KeyDown(AllegroKeyboardState state, KeyCode keyCode) =>
            AllegroLibrary.AlKeyDown(ref state.Native, (int)keyCode);

        /// <summary>
        /// Converts the given keycode to a description of the key.
        /// </summary>
        /// <param name="keyCode">The key's code.</param>
        /// <returns>String name of the given key code.</returns>
        public static string KeycodeToName(KeyCode keyCode) =>
            Marshal.PtrToStringAnsi(AllegroLibrary.AlKeycodeToName((int)keyCode));

        /// <summary>
        /// Overrides the state of the keyboard LED indicators. Set leds to a combination of the keyboard
        /// modifier flags to enable the corresponding LED indicators (ALLEGRO_KEYMOD_NUMLOCK,
        /// ALLEGRO_KEYMOD_CAPSLOCK and ALLEGRO_KEYMOD_SCROLLLOCK are supported) or to -1 to return
        /// to default behavior. False is returned if the current keyboard driver cannot set LED indicators.
        /// </summary>
        /// <param name="leds">The LEDs to set.</param>
        /// <returns>True if successful, false otherwise.</returns>
        public static bool SetKeyboardLeds(KeyMod leds) =>
            AllegroLibrary.AlSetKeyboardLeds((int)leds);

        /// <summary>
        /// Retrieve the keyboard event source. All keyboard events are generated by this event source.
        /// </summary>
        /// <returns>
        /// Returns null if the keyboard subsystem was not installed, otherwise the event source for keyboard events.
        /// </returns>
        public static AllegroEventSource GetKeyboardEventSource()
        {
            var nativeEventSource = AllegroLibrary.AlGetKeyboardEventSource();
            return nativeEventSource == IntPtr.Zero ? null : new AllegroEventSource { NativeIntPtr = nativeEventSource };
        }

        #region P/Invokes
        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern bool al_install_keyboard();

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern bool al_is_keyboard_installed();

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern void al_uninstall_keyboard();

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern void al_get_keyboard_state(ref NativeKeyboardState retState);

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern void al_clear_keyboard_state(IntPtr display);

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern bool al_key_down(ref NativeKeyboardState state, int keycode);

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern IntPtr al_keycode_to_name(int keycode);

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern bool al_set_keyboard_leds(int leds);

        //[DllImport(AlConstants.AllegroMonolithDllFilenameWindows)]
        //private static extern IntPtr al_get_keyboard_event_source();
        #endregion
    }
}
